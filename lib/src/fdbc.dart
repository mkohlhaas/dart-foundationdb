// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// FoundationDB bindings
class FDBC {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FDBC(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FDBC.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Char> fdb_get_error(
    int code,
  ) {
    return _fdb_get_error(
      code,
    );
  }

  late final _fdb_get_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'fdb_get_error');
  late final _fdb_get_error =
      _fdb_get_errorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int fdb_error_predicate(
    int predicate_test,
    int code,
  ) {
    return _fdb_error_predicate(
      predicate_test,
      code,
    );
  }

  late final _fdb_error_predicatePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'fdb_error_predicate');
  late final _fdb_error_predicate =
      _fdb_error_predicatePtr.asFunction<int Function(int, int)>();

  int fdb_network_set_option(
    int option,
    ffi.Pointer<ffi.Uint8> value,
    int value_length,
  ) {
    return _fdb_network_set_option(
      option,
      value,
      value_length,
    );
  }

  late final _fdb_network_set_optionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('fdb_network_set_option');
  late final _fdb_network_set_option = _fdb_network_set_optionPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Uint8>, int)>();

  int fdb_run_network() {
    return _fdb_run_network();
  }

  late final _fdb_run_networkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('fdb_run_network');
  late final _fdb_run_network =
      _fdb_run_networkPtr.asFunction<int Function()>();

  int fdb_stop_network() {
    return _fdb_stop_network();
  }

  late final _fdb_stop_networkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('fdb_stop_network');
  late final _fdb_stop_network =
      _fdb_stop_networkPtr.asFunction<int Function()>();

  int fdb_add_network_thread_completion_hook(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        hook,
    ffi.Pointer<ffi.Void> hook_parameter,
  ) {
    return _fdb_add_network_thread_completion_hook(
      hook,
      hook_parameter,
    );
  }

  late final _fdb_add_network_thread_completion_hookPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<
                  ffi.Void>)>>('fdb_add_network_thread_completion_hook');
  late final _fdb_add_network_thread_completion_hook =
      _fdb_add_network_thread_completion_hookPtr.asFunction<
          int Function(
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>();

  void fdb_future_cancel(
    ffi.Pointer<FDB_future> f,
  ) {
    return _fdb_future_cancel(
      f,
    );
  }

  late final _fdb_future_cancelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FDB_future>)>>(
          'fdb_future_cancel');
  late final _fdb_future_cancel = _fdb_future_cancelPtr
      .asFunction<void Function(ffi.Pointer<FDB_future>)>();

  void fdb_future_release_memory(
    ffi.Pointer<FDB_future> f,
  ) {
    return _fdb_future_release_memory(
      f,
    );
  }

  late final _fdb_future_release_memoryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FDB_future>)>>(
          'fdb_future_release_memory');
  late final _fdb_future_release_memory = _fdb_future_release_memoryPtr
      .asFunction<void Function(ffi.Pointer<FDB_future>)>();

  void fdb_future_destroy(
    ffi.Pointer<FDB_future> f,
  ) {
    return _fdb_future_destroy(
      f,
    );
  }

  late final _fdb_future_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FDB_future>)>>(
          'fdb_future_destroy');
  late final _fdb_future_destroy = _fdb_future_destroyPtr
      .asFunction<void Function(ffi.Pointer<FDB_future>)>();

  int fdb_future_block_until_ready(
    ffi.Pointer<FDB_future> f,
  ) {
    return _fdb_future_block_until_ready(
      f,
    );
  }

  late final _fdb_future_block_until_readyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FDB_future>)>>(
          'fdb_future_block_until_ready');
  late final _fdb_future_block_until_ready = _fdb_future_block_until_readyPtr
      .asFunction<int Function(ffi.Pointer<FDB_future>)>();

  int fdb_future_is_ready(
    ffi.Pointer<FDB_future> f,
  ) {
    return _fdb_future_is_ready(
      f,
    );
  }

  late final _fdb_future_is_readyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FDB_future>)>>(
          'fdb_future_is_ready');
  late final _fdb_future_is_ready = _fdb_future_is_readyPtr
      .asFunction<int Function(ffi.Pointer<FDB_future>)>();

  int fdb_future_set_callback(
    ffi.Pointer<FDB_future> f,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<FDB_future>, ffi.Pointer<ffi.Void>)>>
        callback,
    ffi.Pointer<ffi.Void> callback_parameter,
  ) {
    return _fdb_future_set_callback(
      f,
      callback,
      callback_parameter,
    );
  }

  late final _fdb_future_set_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FDB_future>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<FDB_future>, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('fdb_future_set_callback');
  late final _fdb_future_set_callback = _fdb_future_set_callbackPtr.asFunction<
      int Function(
          ffi.Pointer<FDB_future>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<FDB_future>, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  int fdb_future_get_bool(
    ffi.Pointer<FDB_future> f,
    ffi.Pointer<ffi.Int> out,
  ) {
    return _fdb_future_get_bool(
      f,
      out,
    );
  }

  late final _fdb_future_get_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FDB_future>,
              ffi.Pointer<ffi.Int>)>>('fdb_future_get_bool');
  late final _fdb_future_get_bool = _fdb_future_get_boolPtr.asFunction<
      int Function(ffi.Pointer<FDB_future>, ffi.Pointer<ffi.Int>)>();

  int fdb_future_get_int64(
    ffi.Pointer<FDB_future> f,
    ffi.Pointer<ffi.Int64> out,
  ) {
    return _fdb_future_get_int64(
      f,
      out,
    );
  }

  late final _fdb_future_get_int64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FDB_future>,
              ffi.Pointer<ffi.Int64>)>>('fdb_future_get_int64');
  late final _fdb_future_get_int64 = _fdb_future_get_int64Ptr.asFunction<
      int Function(ffi.Pointer<FDB_future>, ffi.Pointer<ffi.Int64>)>();

  int fdb_future_get_uint64(
    ffi.Pointer<FDB_future> f,
    ffi.Pointer<ffi.Uint64> out,
  ) {
    return _fdb_future_get_uint64(
      f,
      out,
    );
  }

  late final _fdb_future_get_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FDB_future>,
              ffi.Pointer<ffi.Uint64>)>>('fdb_future_get_uint64');
  late final _fdb_future_get_uint64 = _fdb_future_get_uint64Ptr.asFunction<
      int Function(ffi.Pointer<FDB_future>, ffi.Pointer<ffi.Uint64>)>();

  int fdb_future_get_double(
    ffi.Pointer<FDB_future> f,
    ffi.Pointer<ffi.Double> out,
  ) {
    return _fdb_future_get_double(
      f,
      out,
    );
  }

  late final _fdb_future_get_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FDB_future>,
              ffi.Pointer<ffi.Double>)>>('fdb_future_get_double');
  late final _fdb_future_get_double = _fdb_future_get_doublePtr.asFunction<
      int Function(ffi.Pointer<FDB_future>, ffi.Pointer<ffi.Double>)>();

  int fdb_future_get_key(
    ffi.Pointer<FDB_future> f,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> out_key,
    ffi.Pointer<ffi.Int> out_key_length,
  ) {
    return _fdb_future_get_key(
      f,
      out_key,
      out_key_length,
    );
  }

  late final _fdb_future_get_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FDB_future>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.Int>)>>('fdb_future_get_key');
  late final _fdb_future_get_key = _fdb_future_get_keyPtr.asFunction<
      int Function(ffi.Pointer<FDB_future>, ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          ffi.Pointer<ffi.Int>)>();

  int fdb_future_get_value(
    ffi.Pointer<FDB_future> f,
    ffi.Pointer<ffi.Int> out_present,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> out_value,
    ffi.Pointer<ffi.Int> out_value_length,
  ) {
    return _fdb_future_get_value(
      f,
      out_present,
      out_value,
      out_value_length,
    );
  }

  late final _fdb_future_get_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FDB_future>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.Int>)>>('fdb_future_get_value');
  late final _fdb_future_get_value = _fdb_future_get_valuePtr.asFunction<
      int Function(ffi.Pointer<FDB_future>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>, ffi.Pointer<ffi.Int>)>();

  int fdb_future_get_mappedkeyvalue_array(
    ffi.Pointer<FDB_future> f,
    ffi.Pointer<ffi.Pointer<mappedkeyvalue>> out_kv,
    ffi.Pointer<ffi.Int> out_count,
    ffi.Pointer<ffi.Int> out_more,
  ) {
    return _fdb_future_get_mappedkeyvalue_array(
      f,
      out_kv,
      out_count,
      out_more,
    );
  }

  late final _fdb_future_get_mappedkeyvalue_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FDB_future>,
              ffi.Pointer<ffi.Pointer<mappedkeyvalue>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('fdb_future_get_mappedkeyvalue_array');
  late final _fdb_future_get_mappedkeyvalue_array =
      _fdb_future_get_mappedkeyvalue_arrayPtr.asFunction<
          int Function(
              ffi.Pointer<FDB_future>,
              ffi.Pointer<ffi.Pointer<mappedkeyvalue>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  int fdb_future_get_key_array(
    ffi.Pointer<FDB_future> f,
    ffi.Pointer<ffi.Pointer<key>> out_key_array,
    ffi.Pointer<ffi.Int> out_count,
  ) {
    return _fdb_future_get_key_array(
      f,
      out_key_array,
      out_count,
    );
  }

  late final _fdb_future_get_key_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FDB_future>,
              ffi.Pointer<ffi.Pointer<key>>,
              ffi.Pointer<ffi.Int>)>>('fdb_future_get_key_array');
  late final _fdb_future_get_key_array =
      _fdb_future_get_key_arrayPtr.asFunction<
          int Function(ffi.Pointer<FDB_future>, ffi.Pointer<ffi.Pointer<key>>,
              ffi.Pointer<ffi.Int>)>();

  int fdb_future_get_string_array(
    ffi.Pointer<FDB_future> f,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> out_strings,
    ffi.Pointer<ffi.Int> out_count,
  ) {
    return _fdb_future_get_string_array(
      f,
      out_strings,
      out_count,
    );
  }

  late final _fdb_future_get_string_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FDB_future>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
              ffi.Pointer<ffi.Int>)>>('fdb_future_get_string_array');
  late final _fdb_future_get_string_array =
      _fdb_future_get_string_arrayPtr.asFunction<
          int Function(
              ffi.Pointer<FDB_future>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
              ffi.Pointer<ffi.Int>)>();

  int fdb_future_get_keyrange_array(
    ffi.Pointer<FDB_future> f,
    ffi.Pointer<ffi.Pointer<keyrange>> out_ranges,
    ffi.Pointer<ffi.Int> out_count,
  ) {
    return _fdb_future_get_keyrange_array(
      f,
      out_ranges,
      out_count,
    );
  }

  late final _fdb_future_get_keyrange_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FDB_future>,
              ffi.Pointer<ffi.Pointer<keyrange>>,
              ffi.Pointer<ffi.Int>)>>('fdb_future_get_keyrange_array');
  late final _fdb_future_get_keyrange_array =
      _fdb_future_get_keyrange_arrayPtr.asFunction<
          int Function(ffi.Pointer<FDB_future>,
              ffi.Pointer<ffi.Pointer<keyrange>>, ffi.Pointer<ffi.Int>)>();

  int fdb_future_get_granule_summary_array(
    ffi.Pointer<FDB_future> f,
    ffi.Pointer<ffi.Pointer<granulesummary>> out_summaries,
    ffi.Pointer<ffi.Int> out_count,
  ) {
    return _fdb_future_get_granule_summary_array(
      f,
      out_summaries,
      out_count,
    );
  }

  late final _fdb_future_get_granule_summary_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FDB_future>,
              ffi.Pointer<ffi.Pointer<granulesummary>>,
              ffi.Pointer<ffi.Int>)>>('fdb_future_get_granule_summary_array');
  late final _fdb_future_get_granule_summary_array =
      _fdb_future_get_granule_summary_arrayPtr.asFunction<
          int Function(
              ffi.Pointer<FDB_future>,
              ffi.Pointer<ffi.Pointer<granulesummary>>,
              ffi.Pointer<ffi.Int>)>();

  /// all for using future result from read_blob_granules_description
  int fdb_future_readbg_get_descriptions(
    ffi.Pointer<FDB_future> f,
    ffi.Pointer<ffi.Pointer<bgfiledescription>> out,
    ffi.Pointer<ffi.Int> desc_count,
  ) {
    return _fdb_future_readbg_get_descriptions(
      f,
      out,
      desc_count,
    );
  }

  late final _fdb_future_readbg_get_descriptionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FDB_future>,
              ffi.Pointer<ffi.Pointer<bgfiledescription>>,
              ffi.Pointer<ffi.Int>)>>('fdb_future_readbg_get_descriptions');
  late final _fdb_future_readbg_get_descriptions =
      _fdb_future_readbg_get_descriptionsPtr.asFunction<
          int Function(
              ffi.Pointer<FDB_future>,
              ffi.Pointer<ffi.Pointer<bgfiledescription>>,
              ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<FDB_result> fdb_readbg_parse_snapshot_file(
    ffi.Pointer<ffi.Uint8> file_data,
    int file_len,
    ffi.Pointer<bgtenantprefix> tenant_prefix,
    ffi.Pointer<bgencryptionctx> encryption_ctx,
  ) {
    return _fdb_readbg_parse_snapshot_file(
      file_data,
      file_len,
      tenant_prefix,
      encryption_ctx,
    );
  }

  late final _fdb_readbg_parse_snapshot_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_result> Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<bgtenantprefix>,
              ffi.Pointer<bgencryptionctx>)>>('fdb_readbg_parse_snapshot_file');
  late final _fdb_readbg_parse_snapshot_file =
      _fdb_readbg_parse_snapshot_filePtr.asFunction<
          ffi.Pointer<FDB_result> Function(ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<bgtenantprefix>, ffi.Pointer<bgencryptionctx>)>();

  ffi.Pointer<FDB_result> fdb_readbg_parse_delta_file(
    ffi.Pointer<ffi.Uint8> file_data,
    int file_len,
    ffi.Pointer<bgtenantprefix> tenant_prefix,
    ffi.Pointer<bgencryptionctx> encryption_ctx,
  ) {
    return _fdb_readbg_parse_delta_file(
      file_data,
      file_len,
      tenant_prefix,
      encryption_ctx,
    );
  }

  late final _fdb_readbg_parse_delta_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_result> Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<bgtenantprefix>,
              ffi.Pointer<bgencryptionctx>)>>('fdb_readbg_parse_delta_file');
  late final _fdb_readbg_parse_delta_file =
      _fdb_readbg_parse_delta_filePtr.asFunction<
          ffi.Pointer<FDB_result> Function(ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<bgtenantprefix>, ffi.Pointer<bgencryptionctx>)>();

  /// FDBResult is a synchronous computation result, as opposed to a future that is asynchronous.
  void fdb_result_destroy(
    ffi.Pointer<FDB_result> r,
  ) {
    return _fdb_result_destroy(
      r,
    );
  }

  late final _fdb_result_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FDB_result>)>>(
          'fdb_result_destroy');
  late final _fdb_result_destroy = _fdb_result_destroyPtr
      .asFunction<void Function(ffi.Pointer<FDB_result>)>();

  int fdb_result_get_keyvalue_array(
    ffi.Pointer<FDB_result> r,
    ffi.Pointer<ffi.Pointer<keyvalue>> out_kv,
    ffi.Pointer<ffi.Int> out_count,
    ffi.Pointer<ffi.Int> out_more,
  ) {
    return _fdb_result_get_keyvalue_array(
      r,
      out_kv,
      out_count,
      out_more,
    );
  }

  late final _fdb_result_get_keyvalue_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FDB_result>,
              ffi.Pointer<ffi.Pointer<keyvalue>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('fdb_result_get_keyvalue_array');
  late final _fdb_result_get_keyvalue_array =
      _fdb_result_get_keyvalue_arrayPtr.asFunction<
          int Function(
              ffi.Pointer<FDB_result>,
              ffi.Pointer<ffi.Pointer<keyvalue>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  int fdb_result_get_bg_mutations_array(
    ffi.Pointer<FDB_result> r,
    ffi.Pointer<ffi.Pointer<bgmutation>> out_mutations,
    ffi.Pointer<ffi.Int> out_count,
  ) {
    return _fdb_result_get_bg_mutations_array(
      r,
      out_mutations,
      out_count,
    );
  }

  late final _fdb_result_get_bg_mutations_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FDB_result>,
              ffi.Pointer<ffi.Pointer<bgmutation>>,
              ffi.Pointer<ffi.Int>)>>('fdb_result_get_bg_mutations_array');
  late final _fdb_result_get_bg_mutations_array =
      _fdb_result_get_bg_mutations_arrayPtr.asFunction<
          int Function(ffi.Pointer<FDB_result>,
              ffi.Pointer<ffi.Pointer<bgmutation>>, ffi.Pointer<ffi.Int>)>();

  /// TODO: add other return types as we need them
  int fdb_create_database(
    ffi.Pointer<ffi.Char> cluster_file_path,
    ffi.Pointer<ffi.Pointer<FDB_database>> out_database,
  ) {
    return _fdb_create_database(
      cluster_file_path,
      out_database,
    );
  }

  late final _fdb_create_databasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<FDB_database>>)>>('fdb_create_database');
  late final _fdb_create_database = _fdb_create_databasePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<FDB_database>>)>();

  int fdb_create_database_from_connection_string(
    ffi.Pointer<ffi.Char> connection_string,
    ffi.Pointer<ffi.Pointer<FDB_database>> out_database,
  ) {
    return _fdb_create_database_from_connection_string(
      connection_string,
      out_database,
    );
  }

  late final _fdb_create_database_from_connection_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<FDB_database>>)>>(
      'fdb_create_database_from_connection_string');
  late final _fdb_create_database_from_connection_string =
      _fdb_create_database_from_connection_stringPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<FDB_database>>)>();

  void fdb_database_destroy(
    ffi.Pointer<FDB_database> d,
  ) {
    return _fdb_database_destroy(
      d,
    );
  }

  late final _fdb_database_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FDB_database>)>>(
          'fdb_database_destroy');
  late final _fdb_database_destroy = _fdb_database_destroyPtr
      .asFunction<void Function(ffi.Pointer<FDB_database>)>();

  int fdb_database_set_option(
    ffi.Pointer<FDB_database> d,
    int option,
    ffi.Pointer<ffi.Uint8> value,
    int value_length,
  ) {
    return _fdb_database_set_option(
      d,
      option,
      value,
      value_length,
    );
  }

  late final _fdb_database_set_optionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FDB_database>, ffi.Int,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('fdb_database_set_option');
  late final _fdb_database_set_option = _fdb_database_set_optionPtr.asFunction<
      int Function(
          ffi.Pointer<FDB_database>, int, ffi.Pointer<ffi.Uint8>, int)>();

  int fdb_database_open_tenant(
    ffi.Pointer<FDB_database> d,
    ffi.Pointer<ffi.Uint8> tenant_name,
    int tenant_name_length,
    ffi.Pointer<ffi.Pointer<FDB_tenant>> out_tenant,
  ) {
    return _fdb_database_open_tenant(
      d,
      tenant_name,
      tenant_name_length,
      out_tenant,
    );
  }

  late final _fdb_database_open_tenantPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<FDB_database>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Int,
                  ffi.Pointer<ffi.Pointer<FDB_tenant>>)>>(
      'fdb_database_open_tenant');
  late final _fdb_database_open_tenant =
      _fdb_database_open_tenantPtr.asFunction<
          int Function(ffi.Pointer<FDB_database>, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Pointer<FDB_tenant>>)>();

  int fdb_database_create_transaction(
    ffi.Pointer<FDB_database> d,
    ffi.Pointer<ffi.Pointer<FDB_transaction>> out_transaction,
  ) {
    return _fdb_database_create_transaction(
      d,
      out_transaction,
    );
  }

  late final _fdb_database_create_transactionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<FDB_database>,
                  ffi.Pointer<ffi.Pointer<FDB_transaction>>)>>(
      'fdb_database_create_transaction');
  late final _fdb_database_create_transaction =
      _fdb_database_create_transactionPtr.asFunction<
          int Function(ffi.Pointer<FDB_database>,
              ffi.Pointer<ffi.Pointer<FDB_transaction>>)>();

  ffi.Pointer<FDB_future> fdb_database_reboot_worker(
    ffi.Pointer<FDB_database> db,
    ffi.Pointer<ffi.Uint8> address,
    int address_length,
    int check,
    int duration,
  ) {
    return _fdb_database_reboot_worker(
      db,
      address,
      address_length,
      check,
      duration,
    );
  }

  late final _fdb_database_reboot_workerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_database>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('fdb_database_reboot_worker');
  late final _fdb_database_reboot_worker =
      _fdb_database_reboot_workerPtr.asFunction<
          ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_database>,
              ffi.Pointer<ffi.Uint8>, int, int, int)>();

  ffi.Pointer<FDB_future> fdb_database_force_recovery_with_data_loss(
    ffi.Pointer<FDB_database> db,
    ffi.Pointer<ffi.Uint8> dcid,
    int dcid_length,
  ) {
    return _fdb_database_force_recovery_with_data_loss(
      db,
      dcid,
      dcid_length,
    );
  }

  late final _fdb_database_force_recovery_with_data_lossPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_database>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('fdb_database_force_recovery_with_data_loss');
  late final _fdb_database_force_recovery_with_data_loss =
      _fdb_database_force_recovery_with_data_lossPtr.asFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_database>, ffi.Pointer<ffi.Uint8>, int)>();

  ffi.Pointer<FDB_future> fdb_database_create_snapshot(
    ffi.Pointer<FDB_database> db,
    ffi.Pointer<ffi.Uint8> uid,
    int uid_length,
    ffi.Pointer<ffi.Uint8> snap_command,
    int snap_command_length,
  ) {
    return _fdb_database_create_snapshot(
      db,
      uid,
      uid_length,
      snap_command,
      snap_command_length,
    );
  }

  late final _fdb_database_create_snapshotPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_database>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('fdb_database_create_snapshot');
  late final _fdb_database_create_snapshot =
      _fdb_database_create_snapshotPtr.asFunction<
          ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_database>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  double fdb_database_get_main_thread_busyness(
    ffi.Pointer<FDB_database> db,
  ) {
    return _fdb_database_get_main_thread_busyness(
      db,
    );
  }

  late final _fdb_database_get_main_thread_busynessPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<FDB_database>)>>(
      'fdb_database_get_main_thread_busyness');
  late final _fdb_database_get_main_thread_busyness =
      _fdb_database_get_main_thread_busynessPtr
          .asFunction<double Function(ffi.Pointer<FDB_database>)>();

  ffi.Pointer<FDB_future> fdb_database_get_server_protocol(
    ffi.Pointer<FDB_database> db,
    int expected_version,
  ) {
    return _fdb_database_get_server_protocol(
      db,
      expected_version,
    );
  }

  late final _fdb_database_get_server_protocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_database>,
              ffi.Uint64)>>('fdb_database_get_server_protocol');
  late final _fdb_database_get_server_protocol =
      _fdb_database_get_server_protocolPtr.asFunction<
          ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_database>, int)>();

  ffi.Pointer<FDB_future> fdb_database_purge_blob_granules(
    ffi.Pointer<FDB_database> db,
    ffi.Pointer<ffi.Uint8> begin_key_name,
    int begin_key_name_length,
    ffi.Pointer<ffi.Uint8> end_key_name,
    int end_key_name_length,
    int purge_version,
    int force,
  ) {
    return _fdb_database_purge_blob_granules(
      db,
      begin_key_name,
      begin_key_name_length,
      end_key_name,
      end_key_name_length,
      purge_version,
      force,
    );
  }

  late final _fdb_database_purge_blob_granulesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_database>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int64,
              ffi.Int)>>('fdb_database_purge_blob_granules');
  late final _fdb_database_purge_blob_granules =
      _fdb_database_purge_blob_granulesPtr.asFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_database>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              int,
              int)>();

  ffi.Pointer<FDB_future> fdb_database_wait_purge_granules_complete(
    ffi.Pointer<FDB_database> db,
    ffi.Pointer<ffi.Uint8> purge_key_name,
    int purge_key_name_length,
  ) {
    return _fdb_database_wait_purge_granules_complete(
      db,
      purge_key_name,
      purge_key_name_length,
    );
  }

  late final _fdb_database_wait_purge_granules_completePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_database>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('fdb_database_wait_purge_granules_complete');
  late final _fdb_database_wait_purge_granules_complete =
      _fdb_database_wait_purge_granules_completePtr.asFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_database>, ffi.Pointer<ffi.Uint8>, int)>();

  ffi.Pointer<FDB_future> fdb_database_blobbify_range(
    ffi.Pointer<FDB_database> db,
    ffi.Pointer<ffi.Uint8> begin_key_name,
    int begin_key_name_length,
    ffi.Pointer<ffi.Uint8> end_key_name,
    int end_key_name_length,
  ) {
    return _fdb_database_blobbify_range(
      db,
      begin_key_name,
      begin_key_name_length,
      end_key_name,
      end_key_name_length,
    );
  }

  late final _fdb_database_blobbify_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_database>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('fdb_database_blobbify_range');
  late final _fdb_database_blobbify_range =
      _fdb_database_blobbify_rangePtr.asFunction<
          ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_database>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  ffi.Pointer<FDB_future> fdb_database_blobbify_range_blocking(
    ffi.Pointer<FDB_database> db,
    ffi.Pointer<ffi.Uint8> begin_key_name,
    int begin_key_name_length,
    ffi.Pointer<ffi.Uint8> end_key_name,
    int end_key_name_length,
  ) {
    return _fdb_database_blobbify_range_blocking(
      db,
      begin_key_name,
      begin_key_name_length,
      end_key_name,
      end_key_name_length,
    );
  }

  late final _fdb_database_blobbify_range_blockingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_database>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('fdb_database_blobbify_range_blocking');
  late final _fdb_database_blobbify_range_blocking =
      _fdb_database_blobbify_range_blockingPtr.asFunction<
          ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_database>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  ffi.Pointer<FDB_future> fdb_database_unblobbify_range(
    ffi.Pointer<FDB_database> db,
    ffi.Pointer<ffi.Uint8> begin_key_name,
    int begin_key_name_length,
    ffi.Pointer<ffi.Uint8> end_key_name,
    int end_key_name_length,
  ) {
    return _fdb_database_unblobbify_range(
      db,
      begin_key_name,
      begin_key_name_length,
      end_key_name,
      end_key_name_length,
    );
  }

  late final _fdb_database_unblobbify_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_database>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('fdb_database_unblobbify_range');
  late final _fdb_database_unblobbify_range =
      _fdb_database_unblobbify_rangePtr.asFunction<
          ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_database>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  ffi.Pointer<FDB_future> fdb_database_list_blobbified_ranges(
    ffi.Pointer<FDB_database> db,
    ffi.Pointer<ffi.Uint8> begin_key_name,
    int begin_key_name_length,
    ffi.Pointer<ffi.Uint8> end_key_name,
    int end_key_name_length,
    int rangeLimit,
  ) {
    return _fdb_database_list_blobbified_ranges(
      db,
      begin_key_name,
      begin_key_name_length,
      end_key_name,
      end_key_name_length,
      rangeLimit,
    );
  }

  late final _fdb_database_list_blobbified_rangesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_database>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int)>>('fdb_database_list_blobbified_ranges');
  late final _fdb_database_list_blobbified_ranges =
      _fdb_database_list_blobbified_rangesPtr.asFunction<
          ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_database>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  ffi.Pointer<FDB_future> fdb_database_verify_blob_range(
    ffi.Pointer<FDB_database> db,
    ffi.Pointer<ffi.Uint8> begin_key_name,
    int begin_key_name_length,
    ffi.Pointer<ffi.Uint8> end_key_name,
    int end_key_name_length,
    int version,
  ) {
    return _fdb_database_verify_blob_range(
      db,
      begin_key_name,
      begin_key_name_length,
      end_key_name,
      end_key_name_length,
      version,
    );
  }

  late final _fdb_database_verify_blob_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_database>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int64)>>('fdb_database_verify_blob_range');
  late final _fdb_database_verify_blob_range =
      _fdb_database_verify_blob_rangePtr.asFunction<
          ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_database>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  ffi.Pointer<FDB_future> fdb_database_flush_blob_range(
    ffi.Pointer<FDB_database> db,
    ffi.Pointer<ffi.Uint8> begin_key_name,
    int begin_key_name_length,
    ffi.Pointer<ffi.Uint8> end_key_name,
    int end_key_name_length,
    int compact,
    int version,
  ) {
    return _fdb_database_flush_blob_range(
      db,
      begin_key_name,
      begin_key_name_length,
      end_key_name,
      end_key_name_length,
      compact,
      version,
    );
  }

  late final _fdb_database_flush_blob_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_database>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int64)>>('fdb_database_flush_blob_range');
  late final _fdb_database_flush_blob_range =
      _fdb_database_flush_blob_rangePtr.asFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_database>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              int,
              int)>();

  ffi.Pointer<FDB_future> fdb_database_get_client_status(
    ffi.Pointer<FDB_database> db,
  ) {
    return _fdb_database_get_client_status(
      db,
    );
  }

  late final _fdb_database_get_client_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_database>)>>('fdb_database_get_client_status');
  late final _fdb_database_get_client_status =
      _fdb_database_get_client_statusPtr.asFunction<
          ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_database>)>();

  int fdb_tenant_create_transaction(
    ffi.Pointer<FDB_tenant> tenant,
    ffi.Pointer<ffi.Pointer<FDB_transaction>> out_transaction,
  ) {
    return _fdb_tenant_create_transaction(
      tenant,
      out_transaction,
    );
  }

  late final _fdb_tenant_create_transactionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<FDB_tenant>,
                  ffi.Pointer<ffi.Pointer<FDB_transaction>>)>>(
      'fdb_tenant_create_transaction');
  late final _fdb_tenant_create_transaction =
      _fdb_tenant_create_transactionPtr.asFunction<
          int Function(ffi.Pointer<FDB_tenant>,
              ffi.Pointer<ffi.Pointer<FDB_transaction>>)>();

  ffi.Pointer<FDB_future> fdb_tenant_purge_blob_granules(
    ffi.Pointer<FDB_tenant> db,
    ffi.Pointer<ffi.Uint8> begin_key_name,
    int begin_key_name_length,
    ffi.Pointer<ffi.Uint8> end_key_name,
    int end_key_name_length,
    int purge_version,
    int force,
  ) {
    return _fdb_tenant_purge_blob_granules(
      db,
      begin_key_name,
      begin_key_name_length,
      end_key_name,
      end_key_name_length,
      purge_version,
      force,
    );
  }

  late final _fdb_tenant_purge_blob_granulesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_tenant>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int64,
              ffi.Int)>>('fdb_tenant_purge_blob_granules');
  late final _fdb_tenant_purge_blob_granules =
      _fdb_tenant_purge_blob_granulesPtr.asFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_tenant>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              int,
              int)>();

  ffi.Pointer<FDB_future> fdb_tenant_wait_purge_granules_complete(
    ffi.Pointer<FDB_tenant> db,
    ffi.Pointer<ffi.Uint8> purge_key_name,
    int purge_key_name_length,
  ) {
    return _fdb_tenant_wait_purge_granules_complete(
      db,
      purge_key_name,
      purge_key_name_length,
    );
  }

  late final _fdb_tenant_wait_purge_granules_completePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_tenant>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('fdb_tenant_wait_purge_granules_complete');
  late final _fdb_tenant_wait_purge_granules_complete =
      _fdb_tenant_wait_purge_granules_completePtr.asFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_tenant>, ffi.Pointer<ffi.Uint8>, int)>();

  ffi.Pointer<FDB_future> fdb_tenant_blobbify_range(
    ffi.Pointer<FDB_tenant> tenant,
    ffi.Pointer<ffi.Uint8> begin_key_name,
    int begin_key_name_length,
    ffi.Pointer<ffi.Uint8> end_key_name,
    int end_key_name_length,
  ) {
    return _fdb_tenant_blobbify_range(
      tenant,
      begin_key_name,
      begin_key_name_length,
      end_key_name,
      end_key_name_length,
    );
  }

  late final _fdb_tenant_blobbify_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_tenant>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('fdb_tenant_blobbify_range');
  late final _fdb_tenant_blobbify_range =
      _fdb_tenant_blobbify_rangePtr.asFunction<
          ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_tenant>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  ffi.Pointer<FDB_future> fdb_tenant_blobbify_range_blocking(
    ffi.Pointer<FDB_tenant> tenant,
    ffi.Pointer<ffi.Uint8> begin_key_name,
    int begin_key_name_length,
    ffi.Pointer<ffi.Uint8> end_key_name,
    int end_key_name_length,
  ) {
    return _fdb_tenant_blobbify_range_blocking(
      tenant,
      begin_key_name,
      begin_key_name_length,
      end_key_name,
      end_key_name_length,
    );
  }

  late final _fdb_tenant_blobbify_range_blockingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_tenant>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('fdb_tenant_blobbify_range_blocking');
  late final _fdb_tenant_blobbify_range_blocking =
      _fdb_tenant_blobbify_range_blockingPtr.asFunction<
          ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_tenant>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  ffi.Pointer<FDB_future> fdb_tenant_unblobbify_range(
    ffi.Pointer<FDB_tenant> tenant,
    ffi.Pointer<ffi.Uint8> begin_key_name,
    int begin_key_name_length,
    ffi.Pointer<ffi.Uint8> end_key_name,
    int end_key_name_length,
  ) {
    return _fdb_tenant_unblobbify_range(
      tenant,
      begin_key_name,
      begin_key_name_length,
      end_key_name,
      end_key_name_length,
    );
  }

  late final _fdb_tenant_unblobbify_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_tenant>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('fdb_tenant_unblobbify_range');
  late final _fdb_tenant_unblobbify_range =
      _fdb_tenant_unblobbify_rangePtr.asFunction<
          ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_tenant>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  ffi.Pointer<FDB_future> fdb_tenant_list_blobbified_ranges(
    ffi.Pointer<FDB_tenant> tenant,
    ffi.Pointer<ffi.Uint8> begin_key_name,
    int begin_key_name_length,
    ffi.Pointer<ffi.Uint8> end_key_name,
    int end_key_name_length,
    int rangeLimit,
  ) {
    return _fdb_tenant_list_blobbified_ranges(
      tenant,
      begin_key_name,
      begin_key_name_length,
      end_key_name,
      end_key_name_length,
      rangeLimit,
    );
  }

  late final _fdb_tenant_list_blobbified_rangesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_tenant>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int)>>('fdb_tenant_list_blobbified_ranges');
  late final _fdb_tenant_list_blobbified_ranges =
      _fdb_tenant_list_blobbified_rangesPtr.asFunction<
          ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_tenant>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  ffi.Pointer<FDB_future> fdb_tenant_verify_blob_range(
    ffi.Pointer<FDB_tenant> tenant,
    ffi.Pointer<ffi.Uint8> begin_key_name,
    int begin_key_name_length,
    ffi.Pointer<ffi.Uint8> end_key_name,
    int end_key_name_length,
    int version,
  ) {
    return _fdb_tenant_verify_blob_range(
      tenant,
      begin_key_name,
      begin_key_name_length,
      end_key_name,
      end_key_name_length,
      version,
    );
  }

  late final _fdb_tenant_verify_blob_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_tenant>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int64)>>('fdb_tenant_verify_blob_range');
  late final _fdb_tenant_verify_blob_range =
      _fdb_tenant_verify_blob_rangePtr.asFunction<
          ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_tenant>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  ffi.Pointer<FDB_future> fdb_tenant_flush_blob_range(
    ffi.Pointer<FDB_tenant> tenant,
    ffi.Pointer<ffi.Uint8> begin_key_name,
    int begin_key_name_length,
    ffi.Pointer<ffi.Uint8> end_key_name,
    int end_key_name_length,
    int compact,
    int version,
  ) {
    return _fdb_tenant_flush_blob_range(
      tenant,
      begin_key_name,
      begin_key_name_length,
      end_key_name,
      end_key_name_length,
      compact,
      version,
    );
  }

  late final _fdb_tenant_flush_blob_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_tenant>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int64)>>('fdb_tenant_flush_blob_range');
  late final _fdb_tenant_flush_blob_range =
      _fdb_tenant_flush_blob_rangePtr.asFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_tenant>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              int,
              int)>();

  ffi.Pointer<FDB_future> fdb_tenant_get_id(
    ffi.Pointer<FDB_tenant> tenant,
  ) {
    return _fdb_tenant_get_id(
      tenant,
    );
  }

  late final _fdb_tenant_get_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_tenant>)>>('fdb_tenant_get_id');
  late final _fdb_tenant_get_id = _fdb_tenant_get_idPtr
      .asFunction<ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_tenant>)>();

  void fdb_tenant_destroy(
    ffi.Pointer<FDB_tenant> tenant,
  ) {
    return _fdb_tenant_destroy(
      tenant,
    );
  }

  late final _fdb_tenant_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FDB_tenant>)>>(
          'fdb_tenant_destroy');
  late final _fdb_tenant_destroy = _fdb_tenant_destroyPtr
      .asFunction<void Function(ffi.Pointer<FDB_tenant>)>();

  void fdb_transaction_destroy(
    ffi.Pointer<FDB_transaction> tr,
  ) {
    return _fdb_transaction_destroy(
      tr,
    );
  }

  late final _fdb_transaction_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FDB_transaction>)>>(
      'fdb_transaction_destroy');
  late final _fdb_transaction_destroy = _fdb_transaction_destroyPtr
      .asFunction<void Function(ffi.Pointer<FDB_transaction>)>();

  void fdb_transaction_cancel(
    ffi.Pointer<FDB_transaction> tr,
  ) {
    return _fdb_transaction_cancel(
      tr,
    );
  }

  late final _fdb_transaction_cancelPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FDB_transaction>)>>(
      'fdb_transaction_cancel');
  late final _fdb_transaction_cancel = _fdb_transaction_cancelPtr
      .asFunction<void Function(ffi.Pointer<FDB_transaction>)>();

  void fdb_transaction_set_read_version(
    ffi.Pointer<FDB_transaction> tr,
    int version,
  ) {
    return _fdb_transaction_set_read_version(
      tr,
      version,
    );
  }

  late final _fdb_transaction_set_read_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FDB_transaction>,
              ffi.Int64)>>('fdb_transaction_set_read_version');
  late final _fdb_transaction_set_read_version =
      _fdb_transaction_set_read_versionPtr
          .asFunction<void Function(ffi.Pointer<FDB_transaction>, int)>();

  ffi.Pointer<FDB_future> fdb_transaction_get_read_version(
    ffi.Pointer<FDB_transaction> tr,
  ) {
    return _fdb_transaction_get_read_version(
      tr,
    );
  }

  late final _fdb_transaction_get_read_versionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_transaction>)>>(
      'fdb_transaction_get_read_version');
  late final _fdb_transaction_get_read_version =
      _fdb_transaction_get_read_versionPtr.asFunction<
          ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_transaction>)>();

  ffi.Pointer<FDB_future> fdb_transaction_get_addresses_for_key(
    ffi.Pointer<FDB_transaction> tr,
    ffi.Pointer<ffi.Uint8> key_name,
    int key_name_length,
  ) {
    return _fdb_transaction_get_addresses_for_key(
      tr,
      key_name,
      key_name_length,
    );
  }

  late final _fdb_transaction_get_addresses_for_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_transaction>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('fdb_transaction_get_addresses_for_key');
  late final _fdb_transaction_get_addresses_for_key =
      _fdb_transaction_get_addresses_for_keyPtr.asFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_transaction>, ffi.Pointer<ffi.Uint8>, int)>();

  ffi.Pointer<FDB_future> fdb_transaction_get_mapped_range(
    ffi.Pointer<FDB_transaction> tr,
    ffi.Pointer<ffi.Uint8> begin_key_name,
    int begin_key_name_length,
    int begin_or_equal,
    int begin_offset,
    ffi.Pointer<ffi.Uint8> end_key_name,
    int end_key_name_length,
    int end_or_equal,
    int end_offset,
    ffi.Pointer<ffi.Uint8> mapper_name,
    int mapper_name_length,
    int limit,
    int target_bytes,
    int mode,
    int iteration,
    int snapshot,
    int reverse,
  ) {
    return _fdb_transaction_get_mapped_range(
      tr,
      begin_key_name,
      begin_key_name_length,
      begin_or_equal,
      begin_offset,
      end_key_name,
      end_key_name_length,
      end_or_equal,
      end_offset,
      mapper_name,
      mapper_name_length,
      limit,
      target_bytes,
      mode,
      iteration,
      snapshot,
      reverse,
    );
  }

  late final _fdb_transaction_get_mapped_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_transaction>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('fdb_transaction_get_mapped_range');
  late final _fdb_transaction_get_mapped_range =
      _fdb_transaction_get_mapped_rangePtr.asFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_transaction>,
              ffi.Pointer<ffi.Uint8>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              int,
              int,
              int,
              int,
              int,
              int)>();

  void fdb_transaction_set(
    ffi.Pointer<FDB_transaction> tr,
    ffi.Pointer<ffi.Uint8> key_name,
    int key_name_length,
    ffi.Pointer<ffi.Uint8> value,
    int value_length,
  ) {
    return _fdb_transaction_set(
      tr,
      key_name,
      key_name_length,
      value,
      value_length,
    );
  }

  late final _fdb_transaction_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FDB_transaction>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('fdb_transaction_set');
  late final _fdb_transaction_set = _fdb_transaction_setPtr.asFunction<
      void Function(ffi.Pointer<FDB_transaction>, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int)>();

  void fdb_transaction_atomic_op(
    ffi.Pointer<FDB_transaction> tr,
    ffi.Pointer<ffi.Uint8> key_name,
    int key_name_length,
    ffi.Pointer<ffi.Uint8> param,
    int param_length,
    int operation_type,
  ) {
    return _fdb_transaction_atomic_op(
      tr,
      key_name,
      key_name_length,
      param,
      param_length,
      operation_type,
    );
  }

  late final _fdb_transaction_atomic_opPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FDB_transaction>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int)>>('fdb_transaction_atomic_op');
  late final _fdb_transaction_atomic_op =
      _fdb_transaction_atomic_opPtr.asFunction<
          void Function(ffi.Pointer<FDB_transaction>, ffi.Pointer<ffi.Uint8>,
              int, ffi.Pointer<ffi.Uint8>, int, int)>();

  void fdb_transaction_clear(
    ffi.Pointer<FDB_transaction> tr,
    ffi.Pointer<ffi.Uint8> key_name,
    int key_name_length,
  ) {
    return _fdb_transaction_clear(
      tr,
      key_name,
      key_name_length,
    );
  }

  late final _fdb_transaction_clearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FDB_transaction>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('fdb_transaction_clear');
  late final _fdb_transaction_clear = _fdb_transaction_clearPtr.asFunction<
      void Function(
          ffi.Pointer<FDB_transaction>, ffi.Pointer<ffi.Uint8>, int)>();

  void fdb_transaction_clear_range(
    ffi.Pointer<FDB_transaction> tr,
    ffi.Pointer<ffi.Uint8> begin_key_name,
    int begin_key_name_length,
    ffi.Pointer<ffi.Uint8> end_key_name,
    int end_key_name_length,
  ) {
    return _fdb_transaction_clear_range(
      tr,
      begin_key_name,
      begin_key_name_length,
      end_key_name,
      end_key_name_length,
    );
  }

  late final _fdb_transaction_clear_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FDB_transaction>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('fdb_transaction_clear_range');
  late final _fdb_transaction_clear_range =
      _fdb_transaction_clear_rangePtr.asFunction<
          void Function(ffi.Pointer<FDB_transaction>, ffi.Pointer<ffi.Uint8>,
              int, ffi.Pointer<ffi.Uint8>, int)>();

  ffi.Pointer<FDB_future> fdb_transaction_watch(
    ffi.Pointer<FDB_transaction> tr,
    ffi.Pointer<ffi.Uint8> key_name,
    int key_name_length,
  ) {
    return _fdb_transaction_watch(
      tr,
      key_name,
      key_name_length,
    );
  }

  late final _fdb_transaction_watchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_transaction>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('fdb_transaction_watch');
  late final _fdb_transaction_watch = _fdb_transaction_watchPtr.asFunction<
      ffi.Pointer<FDB_future> Function(
          ffi.Pointer<FDB_transaction>, ffi.Pointer<ffi.Uint8>, int)>();

  ffi.Pointer<FDB_future> fdb_transaction_commit(
    ffi.Pointer<FDB_transaction> tr,
  ) {
    return _fdb_transaction_commit(
      tr,
    );
  }

  late final _fdb_transaction_commitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_transaction>)>>('fdb_transaction_commit');
  late final _fdb_transaction_commit = _fdb_transaction_commitPtr.asFunction<
      ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_transaction>)>();

  int fdb_transaction_get_committed_version(
    ffi.Pointer<FDB_transaction> tr,
    ffi.Pointer<ffi.Int64> out_version,
  ) {
    return _fdb_transaction_get_committed_version(
      tr,
      out_version,
    );
  }

  late final _fdb_transaction_get_committed_versionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<FDB_transaction>, ffi.Pointer<ffi.Int64>)>>(
      'fdb_transaction_get_committed_version');
  late final _fdb_transaction_get_committed_version =
      _fdb_transaction_get_committed_versionPtr.asFunction<
          int Function(ffi.Pointer<FDB_transaction>, ffi.Pointer<ffi.Int64>)>();

  /// These functions intentionally return an FDBFuture instead of a numeric value
  /// directly, so that calling the API can see the effect of previous
  /// mutations on the transaction. Specifically, mutations are applied
  /// asynchronously by the main thread. In order to see them, this call has to
  /// be serviced by the main thread too.
  ffi.Pointer<FDB_future> fdb_transaction_get_tag_throttled_duration(
    ffi.Pointer<FDB_transaction> tr,
  ) {
    return _fdb_transaction_get_tag_throttled_duration(
      tr,
    );
  }

  late final _fdb_transaction_get_tag_throttled_durationPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_transaction>)>>(
      'fdb_transaction_get_tag_throttled_duration');
  late final _fdb_transaction_get_tag_throttled_duration =
      _fdb_transaction_get_tag_throttled_durationPtr.asFunction<
          ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_transaction>)>();

  ffi.Pointer<FDB_future> fdb_transaction_get_total_cost(
    ffi.Pointer<FDB_transaction> tr,
  ) {
    return _fdb_transaction_get_total_cost(
      tr,
    );
  }

  late final _fdb_transaction_get_total_costPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_transaction>)>>('fdb_transaction_get_total_cost');
  late final _fdb_transaction_get_total_cost =
      _fdb_transaction_get_total_costPtr.asFunction<
          ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_transaction>)>();

  ffi.Pointer<FDB_future> fdb_transaction_get_approximate_size(
    ffi.Pointer<FDB_transaction> tr,
  ) {
    return _fdb_transaction_get_approximate_size(
      tr,
    );
  }

  late final _fdb_transaction_get_approximate_sizePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_transaction>)>>(
      'fdb_transaction_get_approximate_size');
  late final _fdb_transaction_get_approximate_size =
      _fdb_transaction_get_approximate_sizePtr.asFunction<
          ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_transaction>)>();

  ffi.Pointer<FDB_future> fdb_transaction_get_versionstamp(
    ffi.Pointer<FDB_transaction> tr,
  ) {
    return _fdb_transaction_get_versionstamp(
      tr,
    );
  }

  late final _fdb_transaction_get_versionstampPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_transaction>)>>(
      'fdb_transaction_get_versionstamp');
  late final _fdb_transaction_get_versionstamp =
      _fdb_transaction_get_versionstampPtr.asFunction<
          ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_transaction>)>();

  ffi.Pointer<FDB_future> fdb_transaction_on_error(
    ffi.Pointer<FDB_transaction> tr,
    int error,
  ) {
    return _fdb_transaction_on_error(
      tr,
      error,
    );
  }

  late final _fdb_transaction_on_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_transaction>,
              ffi.Int)>>('fdb_transaction_on_error');
  late final _fdb_transaction_on_error =
      _fdb_transaction_on_errorPtr.asFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_transaction>, int)>();

  void fdb_transaction_reset(
    ffi.Pointer<FDB_transaction> tr,
  ) {
    return _fdb_transaction_reset(
      tr,
    );
  }

  late final _fdb_transaction_resetPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FDB_transaction>)>>(
      'fdb_transaction_reset');
  late final _fdb_transaction_reset = _fdb_transaction_resetPtr
      .asFunction<void Function(ffi.Pointer<FDB_transaction>)>();

  int fdb_transaction_add_conflict_range(
    ffi.Pointer<FDB_transaction> tr,
    ffi.Pointer<ffi.Uint8> begin_key_name,
    int begin_key_name_length,
    ffi.Pointer<ffi.Uint8> end_key_name,
    int end_key_name_length,
    int type,
  ) {
    return _fdb_transaction_add_conflict_range(
      tr,
      begin_key_name,
      begin_key_name_length,
      end_key_name,
      end_key_name_length,
      type,
    );
  }

  late final _fdb_transaction_add_conflict_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FDB_transaction>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int)>>('fdb_transaction_add_conflict_range');
  late final _fdb_transaction_add_conflict_range =
      _fdb_transaction_add_conflict_rangePtr.asFunction<
          int Function(ffi.Pointer<FDB_transaction>, ffi.Pointer<ffi.Uint8>,
              int, ffi.Pointer<ffi.Uint8>, int, int)>();

  ffi.Pointer<FDB_future> fdb_transaction_get_estimated_range_size_bytes(
    ffi.Pointer<FDB_transaction> tr,
    ffi.Pointer<ffi.Uint8> begin_key_name,
    int begin_key_name_length,
    ffi.Pointer<ffi.Uint8> end_key_name,
    int end_key_name_length,
  ) {
    return _fdb_transaction_get_estimated_range_size_bytes(
      tr,
      begin_key_name,
      begin_key_name_length,
      end_key_name,
      end_key_name_length,
    );
  }

  late final _fdb_transaction_get_estimated_range_size_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_transaction>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('fdb_transaction_get_estimated_range_size_bytes');
  late final _fdb_transaction_get_estimated_range_size_bytes =
      _fdb_transaction_get_estimated_range_size_bytesPtr.asFunction<
          ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_transaction>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  ffi.Pointer<FDB_future> fdb_transaction_get_range_split_points(
    ffi.Pointer<FDB_transaction> tr,
    ffi.Pointer<ffi.Uint8> begin_key_name,
    int begin_key_name_length,
    ffi.Pointer<ffi.Uint8> end_key_name,
    int end_key_name_length,
    int chunk_size,
  ) {
    return _fdb_transaction_get_range_split_points(
      tr,
      begin_key_name,
      begin_key_name_length,
      end_key_name,
      end_key_name_length,
      chunk_size,
    );
  }

  late final _fdb_transaction_get_range_split_pointsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_transaction>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int64)>>('fdb_transaction_get_range_split_points');
  late final _fdb_transaction_get_range_split_points =
      _fdb_transaction_get_range_split_pointsPtr.asFunction<
          ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_transaction>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  ffi.Pointer<FDB_future> fdb_transaction_get_blob_granule_ranges(
    ffi.Pointer<FDB_transaction> tr,
    ffi.Pointer<ffi.Uint8> begin_key_name,
    int begin_key_name_length,
    ffi.Pointer<ffi.Uint8> end_key_name,
    int end_key_name_length,
    int rangeLimit,
  ) {
    return _fdb_transaction_get_blob_granule_ranges(
      tr,
      begin_key_name,
      begin_key_name_length,
      end_key_name,
      end_key_name_length,
      rangeLimit,
    );
  }

  late final _fdb_transaction_get_blob_granule_rangesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_transaction>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int)>>('fdb_transaction_get_blob_granule_ranges');
  late final _fdb_transaction_get_blob_granule_ranges =
      _fdb_transaction_get_blob_granule_rangesPtr.asFunction<
          ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_transaction>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  /// LatestVersion (-2) for readVersion means get read version from transaction
  /// Separated out as optional because BG reads can support longer-lived reads than normal FDB transactions
  ffi.Pointer<FDB_result> fdb_transaction_read_blob_granules(
    ffi.Pointer<FDB_transaction> tr,
    ffi.Pointer<ffi.Uint8> begin_key_name,
    int begin_key_name_length,
    ffi.Pointer<ffi.Uint8> end_key_name,
    int end_key_name_length,
    int beginVersion,
    int readVersion,
    readgranulecontext granuleContext,
  ) {
    return _fdb_transaction_read_blob_granules(
      tr,
      begin_key_name,
      begin_key_name_length,
      end_key_name,
      end_key_name_length,
      beginVersion,
      readVersion,
      granuleContext,
    );
  }

  late final _fdb_transaction_read_blob_granulesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_result> Function(
              ffi.Pointer<FDB_transaction>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int64,
              ffi.Int64,
              readgranulecontext)>>('fdb_transaction_read_blob_granules');
  late final _fdb_transaction_read_blob_granules =
      _fdb_transaction_read_blob_granulesPtr.asFunction<
          ffi.Pointer<FDB_result> Function(
              ffi.Pointer<FDB_transaction>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              int,
              int,
              readgranulecontext)>();

  ffi.Pointer<FDB_future> fdb_transaction_summarize_blob_granules(
    ffi.Pointer<FDB_transaction> tr,
    ffi.Pointer<ffi.Uint8> begin_key_name,
    int begin_key_name_length,
    ffi.Pointer<ffi.Uint8> end_key_name,
    int end_key_name_length,
    int summaryVersion,
    int rangeLimit,
  ) {
    return _fdb_transaction_summarize_blob_granules(
      tr,
      begin_key_name,
      begin_key_name_length,
      end_key_name,
      end_key_name_length,
      summaryVersion,
      rangeLimit,
    );
  }

  late final _fdb_transaction_summarize_blob_granulesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_transaction>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int64,
              ffi.Int)>>('fdb_transaction_summarize_blob_granules');
  late final _fdb_transaction_summarize_blob_granules =
      _fdb_transaction_summarize_blob_granulesPtr.asFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_transaction>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              int,
              int)>();

  ffi.Pointer<FDB_future> fdb_transaction_read_blob_granules_description(
    ffi.Pointer<FDB_transaction> tr,
    ffi.Pointer<ffi.Uint8> begin_key_name,
    int begin_key_name_length,
    ffi.Pointer<ffi.Uint8> end_key_name,
    int end_key_name_length,
    int begin_version,
    int read_version,
    ffi.Pointer<ffi.Int64> read_version_out,
  ) {
    return _fdb_transaction_read_blob_granules_description(
      tr,
      begin_key_name,
      begin_key_name_length,
      end_key_name,
      end_key_name_length,
      begin_version,
      read_version,
      read_version_out,
    );
  }

  late final _fdb_transaction_read_blob_granules_descriptionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<FDB_future> Function(
                  ffi.Pointer<FDB_transaction>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Int,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Int,
                  ffi.Int64,
                  ffi.Int64,
                  ffi.Pointer<ffi.Int64>)>>(
      'fdb_transaction_read_blob_granules_description');
  late final _fdb_transaction_read_blob_granules_description =
      _fdb_transaction_read_blob_granules_descriptionPtr.asFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_transaction>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Int64>)>();

  int fdb_select_api_version_impl(
    int runtime_version,
    int header_version,
  ) {
    return _fdb_select_api_version_impl(
      runtime_version,
      header_version,
    );
  }

  late final _fdb_select_api_version_implPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'fdb_select_api_version_impl');
  late final _fdb_select_api_version_impl =
      _fdb_select_api_version_implPtr.asFunction<int Function(int, int)>();

  int fdb_get_max_api_version() {
    return _fdb_get_max_api_version();
  }

  late final _fdb_get_max_api_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'fdb_get_max_api_version');
  late final _fdb_get_max_api_version =
      _fdb_get_max_api_versionPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> fdb_get_client_version() {
    return _fdb_get_client_version();
  }

  late final _fdb_get_client_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'fdb_get_client_version');
  late final _fdb_get_client_version =
      _fdb_get_client_versionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int fdb_future_get_version(
    ffi.Pointer<FDB_future> f,
    ffi.Pointer<ffi.Int64> out_version,
  ) {
    return _fdb_future_get_version(
      f,
      out_version,
    );
  }

  late final _fdb_future_get_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FDB_future>,
              ffi.Pointer<ffi.Int64>)>>('fdb_future_get_version');
  late final _fdb_future_get_version = _fdb_future_get_versionPtr.asFunction<
      int Function(ffi.Pointer<FDB_future>, ffi.Pointer<ffi.Int64>)>();

  int fdb_future_get_cluster(
    ffi.Pointer<FDB_future> f,
    ffi.Pointer<ffi.Pointer<FDB_cluster>> out_cluster,
  ) {
    return _fdb_future_get_cluster(
      f,
      out_cluster,
    );
  }

  late final _fdb_future_get_clusterPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<FDB_future>,
                  ffi.Pointer<ffi.Pointer<FDB_cluster>>)>>(
      'fdb_future_get_cluster');
  late final _fdb_future_get_cluster = _fdb_future_get_clusterPtr.asFunction<
      int Function(
          ffi.Pointer<FDB_future>, ffi.Pointer<ffi.Pointer<FDB_cluster>>)>();

  int fdb_future_get_database(
    ffi.Pointer<FDB_future> f,
    ffi.Pointer<ffi.Pointer<FDB_database>> out_database,
  ) {
    return _fdb_future_get_database(
      f,
      out_database,
    );
  }

  late final _fdb_future_get_databasePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<FDB_future>,
                  ffi.Pointer<ffi.Pointer<FDB_database>>)>>(
      'fdb_future_get_database');
  late final _fdb_future_get_database = _fdb_future_get_databasePtr.asFunction<
      int Function(
          ffi.Pointer<FDB_future>, ffi.Pointer<ffi.Pointer<FDB_database>>)>();

  ffi.Pointer<FDB_future> fdb_create_cluster(
    ffi.Pointer<ffi.Char> cluster_file_path,
  ) {
    return _fdb_create_cluster(
      cluster_file_path,
    );
  }

  late final _fdb_create_clusterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<ffi.Char>)>>('fdb_create_cluster');
  late final _fdb_create_cluster = _fdb_create_clusterPtr
      .asFunction<ffi.Pointer<FDB_future> Function(ffi.Pointer<ffi.Char>)>();

  void fdb_cluster_destroy(
    ffi.Pointer<FDB_cluster> c,
  ) {
    return _fdb_cluster_destroy(
      c,
    );
  }

  late final _fdb_cluster_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FDB_cluster>)>>(
          'fdb_cluster_destroy');
  late final _fdb_cluster_destroy = _fdb_cluster_destroyPtr
      .asFunction<void Function(ffi.Pointer<FDB_cluster>)>();

  int fdb_cluster_set_option(
    ffi.Pointer<FDB_cluster> c,
    int option,
    ffi.Pointer<ffi.Uint8> value,
    int value_length,
  ) {
    return _fdb_cluster_set_option(
      c,
      option,
      value,
      value_length,
    );
  }

  late final _fdb_cluster_set_optionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FDB_cluster>, ffi.Int32,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('fdb_cluster_set_option');
  late final _fdb_cluster_set_option = _fdb_cluster_set_optionPtr.asFunction<
      int Function(
          ffi.Pointer<FDB_cluster>, int, ffi.Pointer<ffi.Uint8>, int)>();

  ffi.Pointer<FDB_future> fdb_cluster_create_database(
    ffi.Pointer<FDB_cluster> c,
    ffi.Pointer<ffi.Uint8> db_name,
    int db_name_length,
  ) {
    return _fdb_cluster_create_database(
      c,
      db_name,
      db_name_length,
    );
  }

  late final _fdb_cluster_create_databasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_cluster>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('fdb_cluster_create_database');
  late final _fdb_cluster_create_database =
      _fdb_cluster_create_databasePtr.asFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_cluster>, ffi.Pointer<ffi.Uint8>, int)>();

  int fdb_future_get_error(
    ffi.Pointer<FDB_future> f,
    ffi.Pointer<ffi.Pointer<ffi.Char>> out_description,
  ) {
    return _fdb_future_get_error(
      f,
      out_description,
    );
  }

  late final _fdb_future_get_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FDB_future>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('fdb_future_get_error');
  late final _fdb_future_get_error = _fdb_future_get_errorPtr.asFunction<
      int Function(
          ffi.Pointer<FDB_future>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int fdb_future_is_error(
    ffi.Pointer<FDB_future> f,
  ) {
    return _fdb_future_is_error(
      f,
    );
  }

  late final _fdb_future_is_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FDB_future>)>>(
          'fdb_future_is_error');
  late final _fdb_future_is_error = _fdb_future_is_errorPtr
      .asFunction<int Function(ffi.Pointer<FDB_future>)>();

  int fdb_future_get_keyvalue_array(
    ffi.Pointer<FDB_future> f,
    ffi.Pointer<ffi.Pointer<keyvalue>> out_kv,
    ffi.Pointer<ffi.Int> out_count,
  ) {
    return _fdb_future_get_keyvalue_array(
      f,
      out_kv,
      out_count,
    );
  }

  late final _fdb_future_get_keyvalue_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FDB_future>,
              ffi.Pointer<ffi.Pointer<keyvalue>>,
              ffi.Pointer<ffi.Int>)>>('fdb_future_get_keyvalue_array');
  late final _fdb_future_get_keyvalue_array =
      _fdb_future_get_keyvalue_arrayPtr.asFunction<
          int Function(ffi.Pointer<FDB_future>,
              ffi.Pointer<ffi.Pointer<keyvalue>>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<FDB_future> fdb_transaction_get(
    ffi.Pointer<FDB_transaction> tr,
    ffi.Pointer<ffi.Uint8> key_name,
    int key_name_length,
  ) {
    return _fdb_transaction_get(
      tr,
      key_name,
      key_name_length,
    );
  }

  late final _fdb_transaction_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_transaction>,
              ffi.Pointer<ffi.Uint8>, ffi.Int)>>('fdb_transaction_get');
  late final _fdb_transaction_get = _fdb_transaction_getPtr.asFunction<
      ffi.Pointer<FDB_future> Function(
          ffi.Pointer<FDB_transaction>, ffi.Pointer<ffi.Uint8>, int)>();

  ffi.Pointer<FDB_future> fdb_transaction_get_key(
    ffi.Pointer<FDB_transaction> tr,
    ffi.Pointer<ffi.Uint8> key_name,
    int key_name_length,
    int or_equal,
    int offset,
  ) {
    return _fdb_transaction_get_key(
      tr,
      key_name,
      key_name_length,
      or_equal,
      offset,
    );
  }

  late final _fdb_transaction_get_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_transaction>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('fdb_transaction_get_key');
  late final _fdb_transaction_get_key = _fdb_transaction_get_keyPtr.asFunction<
      ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_transaction>,
          ffi.Pointer<ffi.Uint8>, int, int, int)>();

  int fdb_setup_network(
    ffi.Pointer<ffi.Char> local_address,
  ) {
    return _fdb_setup_network(
      local_address,
    );
  }

  late final _fdb_setup_networkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'fdb_setup_network');
  late final _fdb_setup_network =
      _fdb_setup_networkPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void fdb_transaction_set_option(
    ffi.Pointer<FDB_transaction> tr,
    int option,
  ) {
    return _fdb_transaction_set_option(
      tr,
      option,
    );
  }

  late final _fdb_transaction_set_optionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FDB_transaction>,
              ffi.Int)>>('fdb_transaction_set_option');
  late final _fdb_transaction_set_option = _fdb_transaction_set_optionPtr
      .asFunction<void Function(ffi.Pointer<FDB_transaction>, int)>();

  ffi.Pointer<FDB_future> fdb_transaction_get_range(
    ffi.Pointer<FDB_transaction> tr,
    ffi.Pointer<ffi.Uint8> begin_key_name,
    int begin_key_name_length,
    ffi.Pointer<ffi.Uint8> end_key_name,
    int end_key_name_length,
    int limit,
  ) {
    return _fdb_transaction_get_range(
      tr,
      begin_key_name,
      begin_key_name_length,
      end_key_name,
      end_key_name_length,
      limit,
    );
  }

  late final _fdb_transaction_get_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_transaction>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int)>>('fdb_transaction_get_range');
  late final _fdb_transaction_get_range =
      _fdb_transaction_get_rangePtr.asFunction<
          ffi.Pointer<FDB_future> Function(ffi.Pointer<FDB_transaction>,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  ffi.Pointer<FDB_future> fdb_transaction_get_range_selector(
    ffi.Pointer<FDB_transaction> tr,
    ffi.Pointer<ffi.Uint8> begin_key_name,
    int begin_key_name_length,
    int begin_or_equal,
    int begin_offset,
    ffi.Pointer<ffi.Uint8> end_key_name,
    int end_key_name_length,
    int end_or_equal,
    int end_offset,
    int limit,
  ) {
    return _fdb_transaction_get_range_selector(
      tr,
      begin_key_name,
      begin_key_name_length,
      begin_or_equal,
      begin_offset,
      end_key_name,
      end_key_name_length,
      end_or_equal,
      end_offset,
      limit,
    );
  }

  late final _fdb_transaction_get_range_selectorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_transaction>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('fdb_transaction_get_range_selector');
  late final _fdb_transaction_get_range_selector =
      _fdb_transaction_get_range_selectorPtr.asFunction<
          ffi.Pointer<FDB_future> Function(
              ffi.Pointer<FDB_transaction>,
              ffi.Pointer<ffi.Uint8>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              int,
              int,
              int)>();
}

abstract class FDBBGMutationType {
  static const int FDB_BG_MUTATION_TYPE_SET_VALUE = 0;
  static const int FDB_BG_MUTATION_TYPE_CLEAR_RANGE = 1;
}

final class FDB_future extends ffi.Opaque {}

/// Memory layout of MappedKeyValueRef.
///
/// Total 112 bytes
/// - key (12 bytes)
/// :74:8F:8E:5F:AE:7F:00:00
/// :4A:00:00:00
/// - value (12 bytes)
/// :70:8F:8E:5F:AE:7F:00:00
/// :00:00:00:00
/// - begin selector (20 bytes)
/// :30:8F:8E:5F:AE:7F:00:00
/// :2D:00:00:00
/// :00:7F:00:00
/// :01:00:00:00
/// - end selector (20 bytes)
/// :EC:8E:8E:5F:AE:7F:00:00
/// :2D:00:00:00
/// :00:2B:3C:60
/// :01:00:00:00
/// - vector (16 bytes)
/// :74:94:8E:5F:AE:7F:00:00
/// :01:00:00:00
/// :01:00:00:00
/// - buffer (32 bytes)
/// :00:20:D1:61:00:00:00:00
/// :00:00:00:00:00:00:00:00
/// :00:00:00:00:00:00:00:00
/// :01:00:00:00:AE:7F:00:00
final class mappedkeyvalue extends ffi.Struct {
  external key key1;

  external key value;

  /// It's complicated to map a std::variant to C. For now we assume the underlying requests are always getRange and
  /// take the shortcut.
  external getrangereqandresult getRange;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.UnsignedChar> buffer;
}

@ffi.Packed(4)
final class key extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> key1;

  @ffi.Int()
  external int key_length;
}

/// Memory layout of GetRangeReqAndResultRef.
final class getrangereqandresult extends ffi.Struct {
  external keyselector begin;

  external keyselector end;

  external ffi.Pointer<keyvalue> data;

  @ffi.Int()
  external int m_size;

  @ffi.Int()
  external int m_capacity;
}

/// Memory layout of KeySelectorRef.
final class keyselector extends ffi.Struct {
  external key key1;

  /// orEqual and offset have not be tested in C binding. Just a placeholder.
  @ffi.Int()
  external int orEqual;

  @ffi.Int()
  external int offset;
}

@ffi.Packed(4)
final class keyvalue extends ffi.Struct {
  external ffi.Pointer<ffi.Void> key;

  @ffi.Int()
  external int key_length;

  external ffi.Pointer<ffi.Void> value;

  @ffi.Int()
  external int value_length;
}

@ffi.Packed(4)
final class keyrange extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> begin_key;

  @ffi.Int()
  external int begin_key_length;

  external ffi.Pointer<ffi.Uint8> end_key;

  @ffi.Int()
  external int end_key_length;
}

@ffi.Packed(4)
final class granulesummary extends ffi.Struct {
  external keyrange key_range;

  @ffi.Int64()
  external int snapshot_version;

  @ffi.Int64()
  external int snapshot_size;

  @ffi.Int64()
  external int delta_version;

  @ffi.Int64()
  external int delta_size;
}

@ffi.Packed(4)
final class bgfiledescription extends ffi.Struct {
  external keyrange key_range;

  @ffi.Int()
  external int snapshot_present;

  external bgfilepointer snapshot_file_pointer;

  @ffi.Int()
  external int delta_file_count;

  external ffi.Pointer<bgfilepointer> delta_files;

  @ffi.Int()
  external int memory_mutation_count;

  external ffi.Pointer<bgmutation> memory_mutations;

  external bgtenantprefix tenant_prefix;
}

@ffi.Packed(4)
final class bgfilepointer extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> filename_ptr;

  @ffi.Int()
  external int filename_length;

  @ffi.Int64()
  external int file_offset;

  @ffi.Int64()
  external int file_length;

  @ffi.Int64()
  external int full_file_length;

  @ffi.Int64()
  external int file_version;

  external bgencryptionctx encryption_ctx;
}

final class bgencryptionctx extends ffi.Struct {
  @ffi.Int()
  external int present;

  external bgencryptionkey textKey;

  @ffi.Uint32()
  external int textKCV;

  external bgencryptionkey headerKey;

  @ffi.Uint32()
  external int headerKCV;

  external key iv;
}

/// encryption structs correspond to similar ones in BlobGranuleCommon.h
@ffi.Packed(4)
final class bgencryptionkey extends ffi.Struct {
  @ffi.Int64()
  external int domain_id;

  @ffi.Uint64()
  external int base_key_id;

  @ffi.Uint32()
  external int base_kcv;

  @ffi.Uint64()
  external int random_salt;

  external key base_key;
}

@ffi.Packed(4)
final class bgmutation extends ffi.Struct {
  /// FDBBGMutationType
  @ffi.Uint8()
  external int type;

  @ffi.Int64()
  external int version;

  external ffi.Pointer<ffi.Uint8> param1_ptr;

  @ffi.Int()
  external int param1_length;

  external ffi.Pointer<ffi.Uint8> param2_ptr;

  @ffi.Int()
  external int param2_length;
}

final class bgtenantprefix extends ffi.Struct {
  @ffi.Int()
  external int present;

  external key prefix;
}

final class FDB_result extends ffi.Opaque {}

final class FDB_database extends ffi.Opaque {}

final class FDB_tenant extends ffi.Opaque {}

final class FDB_transaction extends ffi.Opaque {}

final class readgranulecontext extends ffi.Struct {
  /// User context to pass along to functions
  external ffi.Pointer<ffi.Void> userContext;

  /// Returns a unique id for the load. Asynchronous to support queueing multiple in parallel.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<ffi.Char> filename,
              ffi.Int filenameLength,
              ffi.Int64 offset,
              ffi.Int64 length,
              ffi.Int64 fullFileLength,
              ffi.Pointer<ffi.Void> context)>> start_load_f;

  /// Returns data for the load. Pass the loadId returned by start_load_f
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Int64 loadId, ffi.Pointer<ffi.Void> context)>> get_load_f;

  /// Frees data from load. Pass the loadId returned by start_load_f
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64 loadId, ffi.Pointer<ffi.Void> context)>> free_load_f;

  /// Set this to true for testing if you don't want to read the granule files,
  /// just do the request to the blob workers
  @ffi.Int()
  external int debugNoMaterialize;

  /// Number of granules to load in parallel
  @ffi.Int()
  external int granuleParallelism;
}

abstract class FDBClusterOption {
  /// This option is only a placeholder for C compatibility and should not be used
  static const int FDB_CLUSTER_OPTION_DUMMY_DO_NOT_USE = -1;
}

final class FDB_cluster extends ffi.Opaque {}
